name: Build & Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    strategy:
      matrix:
       include:
        - arch: "linux/arm64"
          dotnet_rid: "linux-arm64"
          runner: "buildjet-2vcpu-ubuntu-2204-arm"
        - arch: "linux/amd64"
          dotnet_rid: "linux-amd64"
          runner: "ubuntu-latest"
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}-${{ matrix.arch }}
      cancel-in-progress: true
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Building for ${{ matrix.arch }} on ${{ matrix.runner }}
        run: |
          echo "Building for $ARCH on $RUNNER"
          platform=${{ matrix.arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV          
        env:
          ARCH: ${{ matrix.arch }}
          RUNNER: ${{ matrix.runner }}
          
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set REPO env variable
        run: |
          docker_repo="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "DOCKER_REPO=${docker_repo@L}" >> "${GITHUB_ENV}"
      
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.DOCKER_REPO }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          file: ./SimpleCDN/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.arch }}
          outputs: type=image,"name=${{ env.DOCKER_REPO }}",push-by-digest=true,name-canonical=true,push=true
          provenance: false
          sbom: false
          build-args: |
            DOTNET_BUILD_PLATFORM=${{ matrix.dotnet_rid }}
            
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-and-push.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"          

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.2.4'
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set REPO env variable
        run: |
          docker_repo="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "DOCKER_REPO=${docker_repo@L}" >> "${GITHUB_ENV}"
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.DOCKER_REPO }}
          # use the dev tag if build is on main branch, use latest tag if build is on release
          # this means latest will always mean the latest stable build.
          tags: |
            ${{ env.BRANCH_NAME == 'main' && 'dev' || 'latest' }}
            ${{ github.sha }}
            ${{ env.BRANCH_NAME }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_REPO }}@sha256:%s ' *)
  
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_REPO }}:${{ steps.meta.outputs.version }}
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          # extract the digest using docker inspect and take only the sha256
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.DOCKER_REPO }} | grep -Po "(?<=@).*")
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
